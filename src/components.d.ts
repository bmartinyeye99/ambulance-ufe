/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface xbopkoAmbulanceWlApp {
        "ambulanceId": string;
        "apiBase": string;
        "basePath": string;
    }
    interface xbopkoAmbulanceWlEditor {
        "ambulanceId": string;
        "apiBase": string;
        "entryId": string;
    }
    interface xbopkoAmbulanceWlList {
        "ambulanceId": string;
        "apiBase": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface xbopkoAmbulanceWlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLxbopkoAmbulanceWlEditorElement;
}
export interface xbopkoAmbulanceWlListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLxbopkoAmbulanceWlListElement;
}
declare global {
    interface HTMLxbopkoAmbulanceWlAppElement extends Components.xbopkoAmbulanceWlApp, HTMLStencilElement {
    }
    var HTMLxbopkoAmbulanceWlAppElement: {
        prototype: HTMLxbopkoAmbulanceWlAppElement;
        new (): HTMLxbopkoAmbulanceWlAppElement;
    };
    interface HTMLxbopkoAmbulanceWlEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLxbopkoAmbulanceWlEditorElement extends Components.xbopkoAmbulanceWlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLxbopkoAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLxbopkoAmbulanceWlEditorElement, ev: xbopkoAmbulanceWlEditorCustomEvent<HTMLxbopkoAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLxbopkoAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLxbopkoAmbulanceWlEditorElement, ev: xbopkoAmbulanceWlEditorCustomEvent<HTMLxbopkoAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLxbopkoAmbulanceWlEditorElement: {
        prototype: HTMLxbopkoAmbulanceWlEditorElement;
        new (): HTMLxbopkoAmbulanceWlEditorElement;
    };
    interface HTMLxbopkoAmbulanceWlListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLxbopkoAmbulanceWlListElement extends Components.xbopkoAmbulanceWlList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLxbopkoAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLxbopkoAmbulanceWlListElement, ev: xbopkoAmbulanceWlListCustomEvent<HTMLxbopkoAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLxbopkoAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLxbopkoAmbulanceWlListElement, ev: xbopkoAmbulanceWlListCustomEvent<HTMLxbopkoAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLxbopkoAmbulanceWlListElement: {
        prototype: HTMLxbopkoAmbulanceWlListElement;
        new (): HTMLxbopkoAmbulanceWlListElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "xbopko-ambulance-wl-app": HTMLxbopkoAmbulanceWlAppElement;
        "xbopko-ambulance-wl-editor": HTMLxbopkoAmbulanceWlEditorElement;
        "xbopko-ambulance-wl-list": HTMLxbopkoAmbulanceWlListElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface xbopkoAmbulanceWlApp {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface xbopkoAmbulanceWlEditor {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "entryId"?: string;
        "onEditor-closed"?: (event: xbopkoAmbulanceWlEditorCustomEvent<string>) => void;
    }
    interface xbopkoAmbulanceWlList {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "onEntry-clicked"?: (event: xbopkoAmbulanceWlListCustomEvent<string>) => void;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "xbopko-ambulance-wl-app": xbopkoAmbulanceWlApp;
        "xbopko-ambulance-wl-editor": xbopkoAmbulanceWlEditor;
        "xbopko-ambulance-wl-list": xbopkoAmbulanceWlList;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "xbopko-ambulance-wl-app": LocalJSX.xbopkoAmbulanceWlApp & JSXBase.HTMLAttributes<HTMLxbopkoAmbulanceWlAppElement>;
            "xbopko-ambulance-wl-editor": LocalJSX.xbopkoAmbulanceWlEditor & JSXBase.HTMLAttributes<HTMLxbopkoAmbulanceWlEditorElement>;
            "xbopko-ambulance-wl-list": LocalJSX.xbopkoAmbulanceWlList & JSXBase.HTMLAttributes<HTMLxbopkoAmbulanceWlListElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
