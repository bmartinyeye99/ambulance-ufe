/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface XbopkoAmbulanceWlApp {
        "ambulanceId": string;
        "apiBase": string;
        "basePath": string;
    }
    interface XbopkoAmbulanceWlEditor {
        "ambulanceId": string;
        "apiBase": string;
        "entryId": string;
    }
    interface XbopkoAmbulanceWlList {
        "ambulanceId": string;
        "apiBase": string;
    }
}
export interface XbopkoAmbulanceWlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXbopkoAmbulanceWlEditorElement;
}
export interface XbopkoAmbulanceWlListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXbopkoAmbulanceWlListElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLXbopkoAmbulanceWlAppElement extends Components.XbopkoAmbulanceWlApp, HTMLStencilElement {
    }
    var HTMLXbopkoAmbulanceWlAppElement: {
        prototype: HTMLXbopkoAmbulanceWlAppElement;
        new (): HTMLXbopkoAmbulanceWlAppElement;
    };
    interface HTMLXbopkoAmbulanceWlEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLXbopkoAmbulanceWlEditorElement extends Components.XbopkoAmbulanceWlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXbopkoAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLXbopkoAmbulanceWlEditorElement, ev: XbopkoAmbulanceWlEditorCustomEvent<HTMLXbopkoAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXbopkoAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLXbopkoAmbulanceWlEditorElement, ev: XbopkoAmbulanceWlEditorCustomEvent<HTMLXbopkoAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXbopkoAmbulanceWlEditorElement: {
        prototype: HTMLXbopkoAmbulanceWlEditorElement;
        new (): HTMLXbopkoAmbulanceWlEditorElement;
    };
    interface HTMLXbopkoAmbulanceWlListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLXbopkoAmbulanceWlListElement extends Components.XbopkoAmbulanceWlList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXbopkoAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLXbopkoAmbulanceWlListElement, ev: XbopkoAmbulanceWlListCustomEvent<HTMLXbopkoAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXbopkoAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLXbopkoAmbulanceWlListElement, ev: XbopkoAmbulanceWlListCustomEvent<HTMLXbopkoAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXbopkoAmbulanceWlListElement: {
        prototype: HTMLXbopkoAmbulanceWlListElement;
        new (): HTMLXbopkoAmbulanceWlListElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "xbopko-ambulance-wl-app": HTMLXbopkoAmbulanceWlAppElement;
        "xbopko-ambulance-wl-editor": HTMLXbopkoAmbulanceWlEditorElement;
        "xbopko-ambulance-wl-list": HTMLXbopkoAmbulanceWlListElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface XbopkoAmbulanceWlApp {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface XbopkoAmbulanceWlEditor {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "entryId"?: string;
        "onEditor-closed"?: (event: XbopkoAmbulanceWlEditorCustomEvent<string>) => void;
    }
    interface XbopkoAmbulanceWlList {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "onEntry-clicked"?: (event: XbopkoAmbulanceWlListCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "xbopko-ambulance-wl-app": XbopkoAmbulanceWlApp;
        "xbopko-ambulance-wl-editor": XbopkoAmbulanceWlEditor;
        "xbopko-ambulance-wl-list": XbopkoAmbulanceWlList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "xbopko-ambulance-wl-app": LocalJSX.XbopkoAmbulanceWlApp & JSXBase.HTMLAttributes<HTMLXbopkoAmbulanceWlAppElement>;
            "xbopko-ambulance-wl-editor": LocalJSX.XbopkoAmbulanceWlEditor & JSXBase.HTMLAttributes<HTMLXbopkoAmbulanceWlEditorElement>;
            "xbopko-ambulance-wl-list": LocalJSX.XbopkoAmbulanceWlList & JSXBase.HTMLAttributes<HTMLXbopkoAmbulanceWlListElement>;
        }
    }
}
